---
title: Fundamentos de Comunicaciones Inalámbricas - TP N°2
subtitle: Fundamentos de Comunicaciones Inalámbricas
author: Matías Roqueta
institute: Instituto Balseiro
lang: es
bibliography: Tex/TP1.bib
biblio-style: ieee
highlight-style: arrow
number-sections: true
format: 
  pdf:
    fontfamily: libertinus
    pdf-engine: xelatex
    include-in-header: Tex/headers.tex
    include-before-body: Tex/tikzsetup.tex
    cite-method: biblatex
    classoption: twocolumn
    geometry:
      - top=20mm
      - bottom=20mm
      - left=12mm
      - right=12mm
    latex-auto-install: true
jupyter: julia-1.8 
---
```{julia}
#| echo: false
#| output: false
include("./Lib.jl")
using .Lib
using Statistics
using FFTW  
using SpecialFunctions
using Distributions
using Plots, ColorSchemes
using LaTeXStrings
using Markdown

pyplot()
default(fontfamily="serif", legendfontsize=10, tickfontsize=10, palette=:seaborn_deep6)

margin = 25
oversample=16384
fc = 1e9
```
# Introducción

En este trabajo práctico vamos a simular y estudiar los modelos estadísticos de un canal inalámbrico, compuesto por un transmisor, un receptor, y una distribución aleatoria de reflectores. Un ejemplo de tal canal ilustrado en la @fig-canal. 

![Canal inalámbrico de múltiples caminos entre un transmisor y un receptor en presencia de un número arbitrario de reflectores distribuidos en _clusters_.](Images/Fig1.tex){#fig-canal}

Las distancias características del canal, $d_1$, $d_2$, $d_3$, y $d_4$, son de los siguientes órdenes de magnitud

- Distancia media entre reflectores en un cluster: $d_1 \sim 1\text{ m}$
- Diámetro medio de los clusters: $d_2 \sim 10\text{ m}$
- Distancia media entre los clusters: $d_3 \sim 100\text{ m}$
- Distancia entre transmisor y receptor: $d_4 \sim 1\text{ km}$

Para la simulación se cuenta con una librería de funciones relevantes a la tarea, disponibles en el siguiente [repositorio](https://github.com/Matrsz/FCI-IB/blob/master/TP2/Lib.jl).

# Especificación del Canal

Se definen primero las posiciones del emisor `Tx` y el receptor `Rx`, fijas y del orden de 1 km. 
```{julia}
#| output: false
posTx = (0,0); posRx = (1000,0)
```
A continuación se definen las posiciones de 4 clusters de reflectores. Estos se definen simétricamente respecto a la posición del receptor, en función de una distancia de referencia de 200 metros.
```{julia}
#| output: false
Cs = [posRx.+p.*200 for p in [( 0.5, 1.0), 
                              ( 1.0,-0.5), 
                              (-0.5,-1.0), 
                              (-1.0, 0.5)]]
```

Cada cluster tendrá 10 reflectores distribuidos aleatoriamente según la distribución uniforme en un radio de 10 metros.
```{julia}
#| output: false
Ns = 10 .+ zeros(size(Cs)) .|> Int
Rs = 10 .+ zeros(size(Cs))

S, Ss = Lib.genScatt(Ns, Rs, Cs)
```

Graficamos la realización el canal resultante, obteniendo la @fig-canal_jl.
```{julia}
#| echo: false
#| fig-cap: Realización del canal inalámbrico aleatorio
#| label: fig-canal_jl
R = 200

p2 = plot(xlim=(-50, posRx[1]+R+50), ylim=(-R-50, R+50), axis=([], false), aspect_ratio=:equal, legend=:topleft)
plot!(p2, [first(posTx)], [last(posTx)], seriestype=:scatter, markersize=10, markershape=:dtriangle, label="Tx")
plot!(p2, [first(posRx)], [last(posRx)], seriestype=:scatter, markersize=10, markershape=:dtriangle, label="Rx")
plot!(p2, first.(S), last.(S), seriestype=:scatter, markersize=1, label="")
for s in Cs
  plot!(p2, first.([posTx, s, posRx]), last.([posTx, s, posRx]), linewidth=0.1, linestyle=:dot, linecolor=:gray, label="")
end
plot(p2, size=(480,220))
```
En la figura se grafican en línea punteada los posibles caminos `Tx` $\rightarrow$ reflector $\rightarrow$ `Rx`. Se calculan las longitudes de los caminos y se presenta su histograma en la @fig-hist_caminos.


```{julia}
#| echo: false
#| fig-cap: Distribución de longitud de caminos presentes en la realización del canal vista en la @fig-canal_jl
#| label: fig-hist_caminos

p1 = histogram(Lib.genDists(S, posTx, posRx).*1e-3, normalize=false, bins=range(posRx[1], stop=posRx[1]+2*R, length=20*length(Ns)).*1e-3, xlabel="r [km]", legend=false, title = "Distrubición de Longitud de Caminos", size=(480,220))
```

# Anchos de banda $W_1 < W_2  < W_3$ {#sec-abs}

Proponga $W_1 < W_2 < W_3$ tal que:

1. Toda la información del canal esté concentrada en un único tap
2. El sistema pueda resolver los clusters pero no los caminos que los conforman
3. El sistema pueda resolver buena parte de los caminos en cada cluster

Para encontrar tales anchos de banda, hacemos uso del ancho de banda de coherencia, relacionado con el _delay spread_ $T_S$ del canal según
$$
W_C \sim \frac{1}{T_s}
$${#eq-wc}

En donde $T_S$ es proporcional a la diferencia entre el camino más largo y el más corto del canal. En base a esto encontramos los delay spread en función de las distancias de los caminos, usando las siguientes distancias

- Vector de todas las distancias que constituyen el canal, graficadas en la @fig-hist_caminos.
- Vector de distancias que constituyen al canal considerando cada cluster como un reflector puntual.
- Vector de todas las distancias que constituyen el canal, agrupadas según el cluster a que pertenecen.
```{julia}
#| output: false
dst  = Lib.genDists(S, posTx, posRx)
dstC = Lib.genDists(Cs, posTx, posRx)
dstS = [Lib.genDists(s, posTx, posRx) 
                               for s in Ss]
```
En función de las distancias, calculamos dos anchos de banda de coherencia característicos, $W_{C1}$ y Y $W_{C2}$. 

- $W_{C1}$: AB de coherencia considerando cada cluster como un reflector puntual
- $W_{C2}$: AB de coherencia medio de un único cluster, ignorando los demás clusters

```{julia}
#| output: false
Wc1 = 1 / Lib.delaySpread(dstC) 
Wc2 = mean(1. / Lib.delaySpread.(dstS)) 
```

```{julia}
#| echo: false
Wc2 = maximum(1. / Lib.delaySpread.(dstS)) 
Markdown.parse("""
Se obtienen así los siguentes anchos de banda de coherencia:
\$W_{c1}\$ = $(round(Wc1*1e-6,digits=2)) MHz,
\$W_{c2}\$ = $(round(Wc2*1e-6,digits=2)) MHz
""")
```

En base a esto, la consigna se cumple eligiendo

- $W_1 < W_{C1} < W_2 < W_{C2} < W_3$
```{julia}
#| echo: false
W1 = Wc1/10
W2 = Wc2*0.9
W3 = Wc2*10
Markdown.parse("""
Para cumplir esos requisitos se eligen los siguientes anchos de banda: \$W_1\$ = $(round(W1*1e-6,digits=2)) MHz, \$W_2\$ = $(round(W2*1e-6,digits=2)) MHz, \$W_3\$ = $(round(W3*1e-6,digits=2)) MHz.
""")
```

Se considera una frecuencia central de 1 GHz, y en esta primera instancia se consideran atenuaciones $a_i=1$ para todos los caminos.
```{julia}
#| output: false
a_i = Lib.genAtts(dst)
```

Y se procede a analizar la respuesta al impulso del canal para los tres anchos de banda elegidos.

## Ancho de Banda $W_1$
Se genera la respuesta al impulso del canal a un ancho de banda $W_{c1}$ en su versión analógica y digital, obteniendo la @fig-h_ayd_1. Asimismo se calcula la respuesta en frecuencia correspondiente, obteniendo la @fig-resp_frec_1.
```{julia}
#| echo: false
#| label: fig-h_ayd_1
#| fig-cap: Respuesta al impulso del canal para el ancho de banda $W_1$ en su versión analógica y digital
hd_1, td_1 = Lib.genhl(dst, fc, W1, a_i, 1, margin)
ha_1, ta_1 = Lib.genhl(dst, fc, W1, a_i, oversample, margin)
hd_1, ha_1 = (hd_1, ha_1) ./ maximum(abs.(hd_1))

p1 = plot(ta_1.*1e3, ha_1 .|> abs)
plot!(p1, td_1.*1e3, hd_1 .|> abs, line=:stem, marker=:square,xlabel=L"$t$ [ms]", size=(480,200), legend=false)
```
```{julia}
#| echo: false
#| label: fig-resp_frec_1
#| fig-cap: Respuesta al impulso del canal analógico y su correspondiente respuesta en frecuencia para el ancho de banda $W_1$
Ha_1, fa_1 = Lib.genHl(ha_1, ta_1)
Ha_1 = Ha_1./maximum(abs.(Ha_1))

p1 = plot(ta_1.*1e3, ha_1 .|> abs, xlabel=L"$t$ [ms]")
p2 = plot(fa_1.*1e-6, Ha_1 .|> abs, xlim=(-1, 1).*W1.*1e-6, xlabel=L"$f$ [MHz]")
plot!(p1, p2, layout=(2,1), size=(480,300), legend=false)
```
Se observa a partir de la @fig-resp_frec_1 que el canal tiene una respuesta en frecuencia plana, correspondiente al comportamiento esperado de un canal con _flat fading_.

## Ancho de Banda $W_2$

Se repite el análisis para la misma realización del canal ahora usando un ancho de banda $W_2$, obteniendo la @fig-h_ayd_2 y @fig-resp_frec_2.

```{julia}
#| echo: false
#| label: fig-h_ayd_2
#| fig-cap: Respuesta al impulso del canal para el ancho de banda $W_2$ en su versión analógica y digital
hd_2, td_2 = Lib.genhl(dst, fc, W2, a_i, 1, margin)
ha_2, ta_2 = Lib.genhl(dst, fc, W2, a_i, oversample, margin)
hd_2, ha_2 = (hd_2, ha_2) ./ maximum(abs.(hd_2))

p1 = plot(ta_2.*1e3, ha_2 .|> abs)
plot!(p1, td_2.*1e3, hd_2 .|> abs, line=:stem, marker=:square,xlabel=L"$t$ [ms]", size=(480,200), legend=false)
```
```{julia}
#| echo: false
#| label: fig-resp_frec_2
#| fig-cap: Respuesta al impulso del canal analógico y su correspondiente respuesta en frecuencia para el ancho de banda $W_2$
Ha_2, fa_2 = Lib.genHl(ha_2, ta_2)
Ha_2 = Ha_2./maximum(abs.(Ha_2))

p1 = plot(ta_2.*1e3, ha_2 .|> abs, xlabel=L"$t$ [ms]")
p2 = plot(fa_2.*1e-6, Ha_2 .|> abs, xlim=(-1, 1).*W2.*1e-6, xlabel=L"$f$ [MHz]")
plot!(p1, p2, layout=(2,1), size=(480,300), legend=false)
```

Se observa en la @fig-resp_frec_2 que a este ancho de banda el canal deja de tener una respuesta en frecuencia plana. Es decir, el canal deja de tener _flat fading_ y pasa a ser un canal selectivo en frecuencia.

## Ancho de Banda $W_3$

Finalmente se repite el ensayo para el ancho de banda $W_3$, obteniendo la @fig-h_ayd_3 y @fig-resp_frec_3.

```{julia}
#| echo: false
#| label: fig-h_ayd_3
#| fig-cap: Respuesta al impulso del canal para el ancho de banda $W_3$ en su versión analógica y digital
hd_3, td_3 = Lib.genhl(dst, fc, W3, a_i, 1, margin)
ha_3, ta_3 = Lib.genhl(dst, fc, W3, a_i, oversample, margin)
hd_3, ha_3 = (hd_3, ha_3) ./ maximum(abs.(hd_3))

p1 = plot(ta_3.*1e3, ha_3 .|> abs)
plot!(p1, td_3.*1e3, hd_3 .|> abs, line=:stem, marker=:square,xlabel=L"$t$ [ms]", size=(480,200), legend=false)
```
Se aprecian en la @fig-h_ayd_3 múltiples picos correspondiendo a los varios reflectores, agrupados según el cluster al que pertenecen. 

```{julia}
#| echo: false
#| label: fig-resp_frec_3
#| fig-cap: Respuesta al impulso del canal analógico y su correspondiente respuesta en frecuencia para el ancho de banda $W_3$
Ha_3, fa_3 = Lib.genHl(ha_3, ta_3)
Ha_3 = Ha_3./maximum(abs.(Ha_3))

p1 = plot(ta_3.*1e3, ha_3 .|> abs, xlabel=L"$t$ [ms]")
p2 = plot(fa_3.*1e-6, Ha_3 .|> abs, xlim=(-1, 1).*W3.*1e-6, xlabel=L"$f$ [MHz]")
plot!(p1, p2, layout=(2,1), size=(480,300), legend=false)
```

Esto se refleja en un comportamiento de selectividad en frecuencia más pronunciado, apreciable en la @fig-resp_frec_3.

# Canal Rayleigh {#sec-rayleigh}

```{julia}
#| echo: false
#| output: false
params = (Ns=Ns, Rs=Rs, Cs=Cs, posTx=posTx, posRx=posRx, fc=fc, W=W1, a_i=a_i, margin=margin)
```

A continuación se verificará empíricamente que el canal con _flat fading_ correspondiente a la @fig-h_ayd_1, tiene comportamiento de canal Rayleigh. Este tipo de canal se caracteriza por la distribución de su tap central $h_0$
$$
h_0 \sim \mathcal{CN}(0, \sigma) \implies 
\begin{aligned}
\left|h_0\right| &\sim \text{Rayleigh}(\sigma)\\[0.5em]
\phi_{h_0} &\sim \mathcal{U}(0,2\pi)
\end{aligned}
$${#eq-rayleigh}

La verificación se consigue haciendo múltiples realizaciones del canal y registrando el valor del tap central.
```{julia}
#| output: false
hs = Lib.simulateFlatFade(4000; params...)
abs_hs, arg_hs = abs.(hs), angle.(hs)
```
Los datos se ajustarán a una distribución Rayleigh para validar la propiedad de canal. Para estimar el valor del parámetro característico de la distribución $\sigma$ se usará el estimador de máxima verosimilitud
$$
\mathlarger{\hat\sigma}_{ML} = \sqrt{\frac{1}{2N}\sum_{i=1}^N x_i^2}
$${#eq-est_rayleigh}
```{julia}
#| echo: false
Markdown.parse("""
Se obtiene el valor del estimador σ = $(round(sqrt(sum(abs_hs.^2)./(2*length(abs_hs))), digits=2)) y se utiliza para instanciar una distribución Rayleigh con ese parámetro.
""")
```
```{julia}
#| output: false
est = sqrt(sum(abs_hs.^2)./(2*length(abs_hs)))
ray = Rayleigh(est)
```
Por otra parte la distribución esperada de la fase ya es conocida a priori, es la distribución uniforme de $-\pi$ a $\pi$. No hace falta estimar ningún parámetro y la distribución se instancia diréctamente.
```{julia}
#| output: false
uni = Uniform(-pi, pi)
```
La pdf obtenida se compara con el histograma normalizado obtenido obteniendo la @fig-rayleigh, se observa que la distribución estimada se ajusta muy bien a los datos empíricos.
```{julia}
#| echo: false
#| label: fig-rayleigh
#| fig-cap: Histogramas normalizados de módulo y fase del tap central sobre varias realizaciones del canal con _flat fading_, comparados con las correspondientes distribuciones esperadas.
p1 = histogram(abs_hs, normalize=:pdf, bins=range(0,maximum(abs_hs),20), xlabel=L"$\left|h_0\right|$", ylabel="pdf", label="Realz.")
x = range(0, maximum(abs_hs), length=2048)
y = pdf.(ray, x)
plot!(p1, x, y, linewidth=2, label="Fit")
p2 = histogram(arg_hs, normalize=:pdf, bins=range(-pi,pi,20), xlabel=L"$\phi_{h_0}}$", ylabel="pdf", label="")
x = range(-3.2, 3.2, length=2048)
y = pdf.(uni, x)
plot!(p2, x, y, linewidth=2, label="")
plot(p1, p2, layout=(2,1), size=(480, 360))
```

# Canal Rician {#sec-rician}
A continuación se estudia el caso en el que existe un camino que contiene $\kappa$ veces la energía de la sumatoria de todos los demás caminos (factor $K$), es decir, para algún $i$ se cumple
$$
  a_i^2 = \kappa \sum_{j\ne i} a_j^2
$${#eq-kfactor}

En este caso se espera que el canal sea canal Rician, cumpliendo la siguiente distribución de $h_0$
$$
h_0 \sim \sqrt{\frac{\kappa}{\kappa+1}}\sigma e^{k\theta} + \sqrt{\frac{1}{\kappa+1}} \mathcal{CN}(0, \sigma) \implies 
\begin{aligned}
\left|h_0\right| &\sim \text{Rice}(\nu, \sigma)\\[0.5em]
\phi_{h_0} &\sim \mathcal{U}(0,2\pi)
\end{aligned}
$${#eq-rician}

Para esto se cuenta con una función que modifica las atenuaciones $a_i$ para generar un camino especular, forzando la @eq-kfactor para algún parámetro K. Con el nuevo vector de atenuaciones se simula el canal _flat fading_ de la misma forma que en caso Rayleigh
```{julia}
#| output: false
k = 1; a2_i = Lib.toRician(a_i, k)
params = (params..., a_i = a2_i)
hs = Lib.simulateFlatFade(4000; params...)
abs_hs, arg_hs = abs.(hs), angle.(hs)
```
La distribución Rician se caracteriza por sus parámetros $\nu$ y $\sigma$, pero también se puede caracterizar por el parámetro de forma $K$ y el parámetro de escala $\Omega$. Si se cuenta con esos parámetros, se pueden obtener $\nu$ y $\sigma$ según las expresiones
$$
\sigma = \sqrt{\frac{\Omega}{2(K+1)}} \qquad\qquad
\nu = \sigma\sqrt{2K}
$${#eq-rice_transform}

Trabajar con estos parámetros es muy fácil en nuestro caso ya que el parámetro $K$ es el mismo parámetro $K$ de nuestro canal Rician, y $\Omega$ es el segundo momento de la distribución.
$$
\Omega = \nu^2 + 2\sigma^2 = E\left[|h_0|^2\right]
$${#eq-moment}

Utilizando estas ecuaciones es que se instancia la distribución Rician que espera que se ajuste a los resultados de la simulación.
```{julia}
#| output: false
omega = mean(abs_hs.^2)
sigma = sqrt(omega/(2*(k+1)))
nu = sigma*sqrt(2*k)
ric = Rician(nu, sigma)
```
Tal como en el caso Rayleigh, se grafican los histogramas de $|h_0|$ y se comparan con las distribuciones esperadas, obteniendo la @fig-rician. 

Se omiten los gráficos de la fase, pero estos también resultan consistentes con la distribución uniforme

```{julia}
#| echo: false
#| label: fig-rician
#| fig-cap: Distribuciones del módulo del tap central sobre varias realizaciones del canal Rician para diversos valores del factor K.
hmax = 3
p = []
for k in [1, 4, 16, 64]
  hs, ric = Lib.simulateFlatFade(4000, k; params...)
  abs_hs = abs.(hs)
  p1 = histogram(abs_hs, normalize=:pdf, bins=range(minimum(abs_hs),maximum(abs_hs),20), xlabel=L"$\left|h_0\right|$", ylabel="pdf", title=L"\kappa = %$k")
  x = range(0, hmax, length=2048)
  y = pdf.(ric, x)
  plot!(p1, x, y, linewidth=2)
  push!(p, p1)
end
plot(p..., layout=(4,1), size=(480,700), legend=false)
```



# Fuerza del Canal {#sec-fuerza}

Nuevamente en el caso de canal Rayleigh se mide la fuerza del canal $|h_0|^2$  en una región geográfica cercana a la posición del receptor. 

La región se define como un rectángulo de 50 m $\times$ 50 m centrado en la posición del receptor original, tal como es ilustrado en la @fig-region.

```{julia}
#| output: false
#| echo: false
xmin, xmax = posRx[1].+(-1,1).*25
ymin, ymax = posRx[2].+(-1,1).*25

L = 500
x = range(xmin, xmax, length=L)
y = range(ymin, ymax, length=L)
```

Al evaluar la fuerza del canal en esta región se obtiene el _heatmap_ presentado en la @fig-fuerza.

```{julia}
#| echo: false
#| fig-cap: Región geográfica donde se evaluará la fuerza del canal para una realización del canal inalámbrico.
#| label: fig-region

p2 = plot(xlim=(-50, posRx[1]+R+50), ylim=(-R-50, R+50), axis=([], false), aspect_ratio=:equal, legend=:topleft)
plot!(p2, [first(posTx)], [last(posTx)], seriestype=:scatter, markersize=10, markershape=:dtriangle, label="Tx")
plot!(p2, [xmin, xmin, xmax, xmax, xmin], [ymin, ymax, ymax, ymin, ymin], linestyle=:dash, color=:gray, label="Región de Eval.")
plot!(p2, first.(S), last.(S), seriestype=:scatter, markersize=1, label="")
plot(p2, size=(480,220))
```

```{julia}
#| echo: false
#| label: fig-fuerza
#| fig-cap: Mapa de fuerza del canal $|h_0|^2$ para una realización del canal inalámbrico evaluada en la región definida en la @fig-region
s = zeros(length(x), length(y))
for i in 1:length(x), j in 1:length(y)
    dsts = Lib.genDists(S, posTx, (x[i], y[j]))
    h, _ = Lib.genhl(dsts, fc, W1 ,a_i, 1, margin)
    s[i,j] = maximum(abs.(h).^2)
end
p1 = heatmap(x, y, s, xlabel="x [m]", ylabel="y [m]", title=L"|h_0|^2", size=(400,400), colorbar=false, c=:devon, aspect_ratio=:equal)
```

En la @fig-fuerza se observa una superposición de bandas diagonales de mínimos y máximos de interferencia. Esta figura da una idea de la distancia de coherencia del canal. 

Esta distancia de coherencia se puede aproximar numéricamente implementando un algoritmo que mida la distancia entre un máximo local y su mínimo local más cercano (por ejemplo con descenso de gradiente), Sin embargo en este caso alcanza con una evaluación cualitativa de la figura para estimar el orden de magnitud de esta distancia, que es del orden de los metros. 

# Modelo de Clarke {#sec-clarke}

A continuación se estudia el efecto Doppler en el canal, comparando los resultados con el modelo de Clarke del canal inalámbrico. 

El canal bajo estudio tendrá un único cluster de 100 elementos y un radio de 100 m centrado en la posición inicial del receptor, tal como se indica en la @fig-clarke. El receptor se mueve dentro de este con una velocidad $v$ constante. 

![Ejemplo de canal inalámbrico descrito por el modelo de Clarke.](Images/Fig2.tex){#fig-clarke}

Las atenuaciones de los caminos estarán dadas por
$$
  a_i = \frac{1}{d_1d_2}
$$

Donde $d_1$ es la distancia de `Tx` a un reflector y $d_2$ la distancia de ese reflector a `Rx`. Esto se asemeja más al modelo de Clarke ya que si en la @fig-clarke la distancia entre `Tx` y `Rx` es mucho mayor que el radio del cluster, se aproxima $d_{1A}\approx d_{1B}$, pero se mantiene $d_{2A}\not\approx d_{2B}$. De esta forma $a_i$ describe curvas de nivel que se aproximan a circumferencias centradas en `Rx`.

Al realizar el canal inalámbrico se obtiene la @fig-clarke_jl.


```{julia}
#| echo: false
#| fig-cap: Realización del canal inalámbrico aleatorio donde se simulará el efecto Doppler, `Tx` se encuentra lejano a `Rx`. `Rx` se desplaza con una velocidad $v$.
#| label: fig-clarke_jl
N = 100
R = 50
posRx = (5000, 0)
S, Ss = Lib.genScatt([N], [R], [posRx])

p2 = plot(aspect_ratio=:equal, axis=([], false), xlim=posRx[1].+(-R-300, R), ylim=(-R,R), legend=:topleft)
plot!(p2, [posRx[1], posRx[1]-R-300], last.([posTx, posTx]), linestyle=:dash,  arrow=(:closed,0.7), label="")
plot!(p2, [first(posRx)], [last(posRx)], seriestype=:scatter, markersize=10, markershape=:dtriangle, label="Rx")
plot!(p2, first(posRx).+[5, 25], last(posRx).+[0, 0], arrow=(:closed,0.7), linecolor=:black, label="")
plot!(p2, first.(S), last.(S), seriestype=:scatter, markersize=1, label="")
plot(p2, size=(480,220))
```

Se define un intervalo de muestreo de Ts = 1 ms.  Se estudiará el efecto Doppler a dos velocidades diferentes, $v_1=$ 10 m/s y $v_2 =$ 20 m/s.

```{julia}
#| output: false
v1 = 10; x1(t) = posRx.+(t*v1, 0)
v2 = 20; x2(t) = posRx.+(t*v2, 0)
```



```{julia}
#| echo: false
dst = Lib.genDists(S, posTx, posRx)
W = 0.1 / Lib.delaySpread(dst) 
Markdown.parse("""
Siguiendo el mismo procedimiento realizado en la @sec-abs, se mide un ancho de banda de coherencia de \$W_{c}\$ = $(round(1 / Lib.delaySpread(dst)*1e-6,digits=2)) MHz, eligiendo entonces \$W\$ = $(round(W*1e-6,digits=2)) MHz para estar en condición de _flat fading_.
""")
```

Se grafican algunas realizaciones de la respuesta a impulso del canal inalámbrico en función del tiempo, obteniendo la @fig-realzv1 y @fig-realzv2.

``` {julia}
#| echo: false
#| label: fig-realzv1
#| fig-cap: Algunas realizaciones de la variación temporal de la respuesta al impulso del canal a una velocidad de receptor de 10 m/s
n = 1:500; Ts = 1e-3; t = n.*Ts

p1, p2, p3 = plot(), plot(), plot(xlabel=L"$t$ [s]")
for p in [p1, p2, p3]
  S, _ = Lib.genScatt([N], [R], [posRx])
  dst = Lib.genDists(S, posTx, posRx)
  hs = Lib.simulateDoppler(posTx, x1.(t), S, fc, W, margin)
  hs = hs./maximum(abs.(hs))
  plot!(p, t, real(hs), ylabel=L"h_0", label = p==p1 ? "Re" : "")
  plot!(p, t, imag(hs), linestyle=:dash, label = p==p1 ? "Im" : "")
end
plot(p1,p1, layout=(2,1), size=(480,200), yaxis=false, legend=:outerright)
```

``` {julia}
#| echo: false
#| label: fig-realzv2
#| fig-cap: Algunas realizaciones de la variación temporal de la respuesta al impulso del canal a una velocidad de receptor de 20 m/s

p1, p2, p3 = plot(), plot(), plot(xlabel=L"$t$ [s]")
for p in [p1, p2, p3]
  S, _ = Lib.genScatt([N], [R], [posRx])
  dst = Lib.genDists(S, posTx, posRx)
  hs = Lib.simulateDoppler(posTx, x2.(t), S, fc, W, margin)
  hs = hs./maximum(abs.(hs))
  plot!(p, t, real(hs), ylabel=L"h_0", label = p==p1 ? "Re" : "")
  plot!(p, t, imag(hs), linestyle=:dash, label = p==p1 ? "Im" : "")
end
plot(p1, p2, layout=(2,1), size=(480,200), yaxis=false, legend=:outerright)
```

La respuesta al impulso es un proceso aleatorio, y se observa que este varía más rápidamente si el receptor tiene una mayor velocidad. Para caracterizar el proceso aleatorio, se calculará la autocorrelación del mismo
$$
  R_0[\tau] = E\left[h_0^\ast[t]\,h_0[t+\tau]\right]
$${#eq-autocor}

El modelo de Clarke indica que esta autocorrelación es real pura, y sigue la función de Bessel de primera especie de orden cero
$$
  R_0[\tau] = a^2\pi J_0(D_s \pi \tau)
$${#eq-clarkej}

En donde $D_s$ es el _Doppler spread_ del canal, dado por
$$
  D_s = \frac{2f_cv}{c}
$${#eq-ds}

El modelo de Clarke también nos da la distribución espectral de potencia de la autocorrelación. 
$$
S(f) = \left\{
\begin{aligned}
  \;&\frac{2a^2}{D_s\sqrt{1-\left(\frac{2f}{D_s}\right)^2}} \qquad &f \in \left[-\tfrac{D_s}{2},\, \tfrac{D_s}{2}\right]\\
  &0  \qquad &f \notin \left[-\tfrac{D_s}{2},\, \tfrac{D_s}{2}\right]
\end{aligned}\right.
$${#eq-clarke_dep}

En particular la @eq-clarke_dep determina el ancho de banda de la distribución espectral de potencia, que será exactamente igual a $D_s$.

## Velocidad $v_1$

Se calcula la autocorrelación empírica simulando múltiples realizaciones del canal, y esta se compara con el resultado de la @eq-clarkej. Para $v_1$ = 10 m/s se obtiene la @fig-clarke_tv1.

```{julia}
#| echo: false
#| label: fig-clarke_tv1
#| fig-cap: Comparación de autocorrelación teórica del modelo de Clarke y resultado empírico de varias realizaciones del canal en parte real e imaginaria, a velocidad $v_1$
params = (N=N, R=R, posTx=posTx, posRx=posRx, fc=fc, W=W, margin=margin)
nRealz = 4096
tt, r = Lib.simulateClarke(t, x1, nRealz; params...)

Ds = 2*fc*v1/3e8
R_t(tt) = besselj0(pi*Ds*tt)

p1 = plot(tt, R_t, label="Re", ylabel=L"R_0", title="Resultado Teórico")
p2 = plot(tt, real(r), label="Re", xlabel=L"$t$ [s]", ylabel=L"R_0")
plot!(p2, tt, imag(r), label="Im", linestyle=:dash, xlabel=L"$t$ [s]", ylabel=L"R_0", title="Simulación")
plot(p1, p2, layout=(2,1), size=(480,380))
```

```{julia}
#| echo: false
dst = Lib.genDists(S, posTx, posRx)
W = 0.1 / Lib.delaySpread(dst) 
Markdown.parse("""
El _Doppler spread_ calculado es de \$D_{s}\$ = $(round(Ds)) Hz, por lo que se espera que este sea el ancho de banda de la distribución espectral de potencia. Esto se verifica con la @fig-clarke_fv1.
""")
```

```{julia}
#| echo: false
#| label: fig-clarke_fv1
#| fig-cap: Comparación de densidad espectral de potencia teórica del modelo de Clarke y resultado empírico de varias realizaciones del canal, a velocidad $v_1$, con su correspondiente ancho de banda esperado.

ff = fftfreq(length(tt), 1/(tt[2]-tt[1])) |> fftshift
dep = fft(r) |> fftshift
p1 = plot(ff, fft(R_t.(tt)) |> fftshift .|> abs, label="", title="Resultado Teórico", ylabel=L"S_0")
p2 = plot(ff, dep .|> abs, label="",title="Simulación", xlabel=L"$f$ [Hz]", ylabel=L"S_0")
plot!(p1, [-Ds/2, -Ds/2], [0, maximum(abs.(fft(R_t.(tt))))], linecolor=:gray, linestyle=:dash, label="BW")
plot!(p1, [Ds/2, Ds/2], [0, maximum(abs.(fft(R_t.(tt))))], linecolor=:gray, linestyle=:dash, label="")
plot!(p2, [-Ds/2, -Ds/2], [0, maximum(abs.(dep))], linecolor=:gray, linestyle=:dash, label="BW")
plot!(p2, [Ds/2, Ds/2], [0, maximum(abs.(dep))], linecolor=:gray, linestyle=:dash, label="")

plot(p1, p2, layout=(2,1), xlim=(-200,200), size=(480,360))
```

Se nota quee los resultados de simulación se corresponden bien al modelo de Clarke, una diferencia es que la autocorrelación empírica no es puramente real, tal como se ve en la @fig-clarke_tv1.

Esto se refleja en el hecho de que la distribución espectral de potencia para el caso empírico, vista en las @fig-clarke_fv1, no es perfectamente simétrica, que es lo que se esperaría de la transformada de Fourier de una función real pura.


{{< pagebreak >}}

## Velocidad $v_2$

El experimento se repite para $v_2$ = 20 m/s, obteniendo la autocorrelación vista en la @fig-clarke_tv2.

```{julia}
#| echo: false
#| label: fig-clarke_tv2
#| fig-cap: Comparación de autocorrelación teórica del modelo de Clarke y resultado empírico de varias realizaciones del canal a velocidad $v_2$
tt, r = Lib.simulateClarke(t, x2, nRealz; params...)

Ds = 2*fc*v2/3e8
R_t(tt) = besselj0(pi*Ds*tt)

p1 = plot(tt, R_t, label="Re", ylabel=L"R_0", title="Resultado Teórico")
p2 = plot(tt, real(r), label="Re", xlabel=L"$\tau$ [s]", ylabel=L"R_0")
plot!(p2, tt, imag(r), label="Im", linestyle=:dash, xlabel=L"$\tau$ [s]", ylabel=L"R_0", title="Simulación")
plot(p1, p2, layout=(2,1), size=(480,380))
```


```{julia}
#| echo: false
#| label: fig-clarke_fv2
#| fig-cap: Comparación de densidad espectral de potencia teórica del modelo de Clarke y resultado empírico de varias realizaciones del canal, a velocidad $v_2$, con su correspondiente ancho de banda esperado.
dep = fft(r) |> fftshift
p1 = plot(ff, fft(R_t.(tt)) |> fftshift .|> abs, label="", title="Resultado Teórico", ylabel=L"S_0")
p2 = plot(ff, dep .|> abs, label="", xlabel=L"$f$ [Hz]", ylabel=L"S_0", title="Simulación")
plot!(p1, [-Ds/2, -Ds/2], [0, maximum(abs.(fft(R_t.(tt))))], linecolor=:gray, linestyle=:dash, label="BW")
plot!(p1, [Ds/2, Ds/2], [0, maximum(abs.(fft(R_t.(tt))))], linecolor=:gray, linestyle=:dash, label="")
plot!(p2, [-Ds/2, -Ds/2], [0, maximum(abs.(dep))], linecolor=:gray, linestyle=:dash, label="BW")
plot!(p2, [Ds/2, Ds/2], [0, maximum(abs.(dep))], linecolor=:gray, linestyle=:dash, label="")

plot(p1, p2, layout=(2,1), xlim=(-200,200), size=(480,360))
```
```{julia}
#| echo: false
dst = Lib.genDists(S, posTx, posRx)
W = 0.1 / Lib.delaySpread(dst) 
Markdown.parse("""
El _Doppler spread_ calculado es de \$D_{s}\$ = $(round(Ds)) Hz, se verifica que este sea el ancho de banda de la distribución espectral de potencia con la @fig-clarke_fv2. 
""")
```

Se observa que a mayor velocidad, la autocorrelación $R_0$ presenta una mayor frecuencia, esto se refleja en el mayor ancho de banda de $S_0$, lo cual es el resultado esperado por la @eq-clarke_dep y se valida comparando la @fig-clarke_fv1 y @fig-clarke_fv2.
<!-- 
# Conclusiones

Se evaluaron los modelos estadísticos del canal inalámbrico. En una primeria instancia se utilizaron los anchos de banda de coherencia para determinar anchos de banda tal que el canal presente _flat fading_ o sea selectivo en frecuencia, visto en la @sec-abs. 

Para el caso particular de canal con _flat fading_, se estudiaron en detalle modelos estadísticos.

Se verificó que el canal cumple las propiedades de canal Rayleygh, o bien de canal Rician si se le fuerza un camino especular, en la @sec-rayleigh y @sec-rician respectivamente.

Por medio de un mapa de fuerza del canal, realizado en la @sec-fuerza, se pudo estimar la distancia de coherencia del canal.

Finalmente se estudia el caso de receptores móviles en la @sec-clarke, evaluando el modelo de Clarke y observando la forma en la cual la velocidad de un móvil afecta a la autocorrelación temporal de la respuesta al impulso del canal. -->